document.addEventListener('DOMContentLoaded', () => {
  const DASHBOARD_VERSION = 'v2.4';

  // DOM Element References
  const versionDisplay = document.getElementById('version-display');
  const cssVersionDisplay = document.getElementById('css-version-display');
  // ... other element references
  
  let allThemes = {};
  let state = { selectedTheme: 'soft-evergreen-theme', selectedAlignment: 'center' };
  let loadedCssVersion = 1.0; // Default if not found in the file

  async function initializeStateFromCSS() {
    try {
      const response = await fetch(`styles.css?v=${new Date().getTime()}`);
      if (!response.ok) throw new Error('styles.css could not be loaded.');
      
      const cssText = await response.text();
      
      // Parse CSS Version from the file's first line
      const versionMatch = /CSS Version:\s*([\d.]+)/.exec(cssText);
      if (versionMatch) {
        loadedCssVersion = parseFloat(versionMatch[1]);
        cssVersionDisplay.textContent = `CSS: v${loadedCssVersion.toFixed(1)}`;
      } else {
        cssVersionDisplay.textContent = 'CSS: v?';
      }

      // (The rest of the parsing logic for :root and themes is the same)
      const rootMatch = /:root\s*\{([^}]+)\}/.exec(cssText);
      if (rootMatch) { /* ... */ }
      const themeRegex = /\/\*\s*(.*?)\s*\*\/\s*\.([\w-]+)\s*\{([^}]+)\}/g;
      allThemes = {};
      let themeMatch;
      while ((themeMatch = themeRegex.exec(cssText)) !== null) { /* ... */ }

    } catch (error) {
      console.error("Initialization failed:", error);
      alert("Error: Could not load styles.css.");
    }
  }

  // (All other functions like applyDashboardTheme, renderThemes, etc., are unchanged)

  function generateCssContent() {
    // Increment the loaded version number by 0.1 for the new file
    const newCssVersion = (loadedCssVersion + 0.1).toFixed(1);
    
    let cssString = `/* Widget Styles - CSS Version: ${newCssVersion} - Generated by Dashboard ${DASHBOARD_VERSION} */\n\n:root {\n`;
    cssString += `  --font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n`;
    const successColor = document.getElementById('color-success').value;
    cssString += `  --success-color: ${successColor};\n`;
    for (let i = 0; i < 6; i++) {
        const statusColor = document.getElementById(`color-status-${i}`).value;
        cssString += `  --status-color-${i}: ${statusColor};\n`;
    }
    cssString += '}\n\n';

    for (const themeKey in allThemes) {
        const theme = allThemes[themeKey];
        cssString += `/* ${theme.name} */\n.${theme.class} {\n  --primary-bg-color: ${theme.colors[0]};\n  --primary-text-color: ${theme.colors[1]};\n  --accent-color: ${theme.colors[2]};\n  --secondary-bg-color: ${theme.colors[3]};\n}\n\n`;
    }
    return cssString;
  }

  async function main() {
    if (versionDisplay) versionDisplay.textContent = DASHBOARD_VERSION;
    await initializeStateFromCSS();
    
    // (The rest of the main function is unchanged)
    renderThemes();
    updateActiveControls();
    // ... etc.
  }

  main();
});